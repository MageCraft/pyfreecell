<?xml version="1.0" encoding="utf-8"?>
<mx:VBox xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:ui="flatasks.ui.*"	
	width="800" height="600"
	creationComplete="this_onCreationComplete()"
	styleName="MainView">
	<mx:Script>
		<![CDATA[
			import mx.events.MenuEvent;
			import mx.events.CollectionEvent;
			import mx.events.FlexEvent;
			import flatasks.ui.controls.FlatasksMenu;
			import mx.controls.Alert;
			import mx.controls.Menu;
			import flatasks.core.HttpApi;
			import mx.collections.ArrayCollection;
			
			[Bindable]
			private var listData:ArrayCollection = new ArrayCollection;
			
			private static const PRIORITY_REGULAR:String = 'Regular';
			private static const PRIORITY_IMPORTANT:String = 'Important';
			
			
			private var siteURL:String = '/';
			 
			private function this_onCreationComplete():void {
							
				getAllContacts();				
			}			
			
			private function addDataItem(task:Object):void {
				var item:Object = new Object;
				item.task = task;
				item.onTaskUpdated = updateTask;
				item.showTaskSettingMenu = showTaskSettingMenu;				
				listData.addItem(item);
			}
			
			private function getAllContacts():void {
				var url:String = siteURL + 'list';
				var resultHandler:Function = function(event:Event):void {
					info('on listContacts() response:');					
					var xml:String = URLLoader(event.target).data;
					info(xml);					
					var xmlDoc:XML = new XML(xml);
					var tasks:XMLList = xmlDoc.task;										
					for each(var t:XML in tasks) {
						var task:Object = new Object;						
						task.key = t.@key;
						task.content = t.@content;
						task.done = t.@done == 'false' ? false:true;
						task.priority = t.@priority;
						info(task.key + ', ' + task.content + ', ' + task.done);
						addDataItem(task);												
					}
					info('\n');				
				}								
				HttpApi.send(url, resultHandler, URLRequestMethod.GET);
			}
			
			private function info(msg:String):void {
				trace(msg);
			}
			
			private function updateTask(task:Object):void {
				var url:String = siteURL + 'update'
				var vars:URLVariables = new URLVariables;
				vars.key = task.key;
				vars.content = task.content;
				vars.done = task.done;	
				vars.priority = task.priority;			
				trace(vars.toString());
				var resultHandler:Function = function(event:Event):void {
					info('on updateContact() response...');
					info(URLLoader(event.target).data);
				}
				HttpApi.send(url, resultHandler, URLRequestMethod.POST, vars);
			}
			
			private function addTask():void {
				trace('addTask');							
				var url:String = siteURL + 'add';
				var vars:URLVariables = new URLVariables;
				var task:Object = new Object;
				task = {content:inputNewTask.text, priority:PRIORITY_REGULAR};
				vars.content = task.content;
				vars.priority = task.priority;				
				var resultHandler:Function = function(event:Event):void {
					info('on addContact() reponse...');
					var key:String = URLLoader(event.target).data.key;					
					task.key = key;
					info('new task key is ' + task.key);
					addDataItem(task);
					inputNewTask.text = '';										
				}
				HttpApi.send(url,resultHandler, URLRequestMethod.POST, vars, URLLoaderDataFormat.VARIABLES);
			}
			
			private function deleteTask(dpItem:Object):void {								
				var url:String = siteURL + 'delete';
				var vars:URLVariables = new URLVariables;
				vars.key = dpItem.task.key;
				var resultHandler:Function = function(event:Event):void {					
					trace('on deleteContact()...');
					trace(URLLoader(event.target).data);
					var idx:int = listData.getItemIndex(dpItem);
					if( idx != -1 ) {
						listData.removeItemAt(idx);
					}				
				}
				HttpApi.send(url, resultHandler, URLRequestMethod.POST, vars);
			}
			
			private function showTaskSettingMenu(x:Number, y:Number, dpItem:Object):void {	
				var menuData:Object = createMenuData(dpItem);			
				var menu:Menu = Menu.createMenu(this, menuData);
				menu.styleName = "SettingMenu";
				menu.addEventListener(FlexEvent.UPDATE_COMPLETE, menu_onUpdateComplete);
				menu.addEventListener(MenuEvent.ITEM_CLICK, menu_onItemClick);				
				menu.show(x, y);		
			}

			private function createMenuData(dpItem:Object):Object {
				var menuData:Array = new Array();
				var deleteItem:Object = {label:'Delete Item', dpItem: dpItem, click:menu_onDeletItemClick};
				menuData.push(deleteItem);
				var priortyItem:Object = {label:"PRIORTY:", enabled:false};
				var priortyRegularItem:Object = {label:'  '+PRIORITY_REGULAR, 
												type:'check', toggled: dpItem.task.priority == PRIORITY_REGULAR,
												priority: PRIORITY_REGULAR,
												dpItem: dpItem, click:menu_onPriortyItemClick};
				var priortyImportantItem:Object = {label:'  '+PRIORITY_IMPORTANT, 
												type:'check', toggled: dpItem.task.priority == PRIORITY_IMPORTANT,
												priority: PRIORITY_IMPORTANT,
												dpItem: dpItem, click:menu_onPriortyItemClick};												
				menuData.push(priortyItem, priortyRegularItem, priortyImportantItem);
				return menuData;  
			}
			
			private function menu_onPriortyItemClick(menuDataItem:Object):void {
				var task:Object = menuDataItem.dpItem.task;
				task.priority = menuDataItem.priority;
				updateTask(task);
				listData.itemUpdated(menuDataItem.dpItem);				 
			}			
			
			
			private function menu_onDeletItemClick(menuDataItem:Object):void {
				deleteTask(menuDataItem.dpItem);
			}
			
			private function menu_onItemClick(event:MenuEvent):void {
				var dataItem:Object = event.item;
				if(dataItem) {
					var clickFunc:Function = dataItem.click;					
					clickFunc(dataItem);
				}
			}			
			private function menu_onUpdateComplete(event:FlexEvent):void {
				
			}
			
			private function buttonNewTask_onClick():void {
				addTask();								
			}			
			
			 
            public var menuData:Array = [
            	{label: "Delete Item"},           	         	
            	{label: "Priority:", enabled:false},
        		{label: "  important", type:"check", toggled: false},
        		{label: "  normal", type:"check", toggled: true},
            	{label: "Move to", enabled:false},	
        		{label: "  list 1"},
        		{label: "  list 2"},               
                ];
		]]>
	</mx:Script>
	<mx:Label text="My Task List" fontSize="16" fontWeight="bold" color="0x235c3d"/>
	<mx:Spacer height="8"/>
	<ui:FlatasksListView id="listView" width="100%" height="100%" dataProvider="{listData}"/>
	<mx:HBox width="100%">
		<mx:TextInput id="inputNewTask" width="100%" borderStyle="solid" borderColor="0x999999"
			enter="addTask()"/>
		<mx:HBox paddingLeft="3" paddingRight="3" borderStyle="solid" borderColor="0x999999">
			<mx:Label text="New Task"/>
		</mx:HBox>	
	</mx:HBox>
	
	
</mx:VBox>
