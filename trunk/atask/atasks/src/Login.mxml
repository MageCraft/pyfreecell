<?xml version="1.0" encoding="utf-8"?>
<mx:ViewStack xmlns:mx="http://www.adobe.com/2006/mxml"
	backgroundColor="0xffffff" width="100%" height="100%" >
	<mx:Canvas id="checkUpdateView" creationComplete="checkUpdateViewComplete()">		
		<mx:Label id="lbUpdateStatus" text="checking update..." styleName="MyFont" fontSize="12"/>
	</mx:Canvas>
	<mx:VBox id="loginView"
		 creationComplete="complete()" paddingLeft="3"
		 styleName="MyFont" fontSize="11">
		<mx:Label text="Login in with your google account" fontSize="13"/>
		<mx:Spacer height="5"/>
		<mx:HBox>
			<mx:Label text="Email:" width="{labelPasswd.width}"/>
			<mx:ComboBox id="email" editable="true" cornerRadius="0" paddingLeft="0" paddingRight="0" fontWeight="normal"
				 change="onEmailChanged()"/>		
		</mx:HBox>
		<mx:HBox>
			<mx:Label id="labelPasswd" text="Password:"/>
			<mx:TextInput id='passwd' displayAsPassword="true" width="{email.width}"/>
		</mx:HBox>	
		<mx:CheckBox label="Remember my password" id="rememberPasswd"/>
		<mx:CheckBox label="Sign in automaticlly" id="autoSignIn"/>	
		<mx:Spacer height="10"/>
		
		<mx:Canvas width="100%">	
		<mx:Button id="btnSignIn" label="Sign In" horizontalCenter="0" click="SignIn()"/>	
		</mx:Canvas>	
	</mx:VBox>
	<mx:Script>
		<![CDATA[
			import mx.events.CloseEvent;
			import mx.controls.Alert;
			import mx.collections.ArrayCollection;
			include 'engine.as'
			
			private var _configDoc:XML;
			
			private static const CONFIG_FILE_NAME:String = 'config.xml';
			
			private var configFile:File;			
			
			private function getCurrentVersion():String {
				var appXML:XML = NativeApplication.nativeApplication.applicationDescriptor;
				var ns:Namespace = appXML.namespace();
				var appVersion:String = appXML.ns::version[0];
				return appVersion;
			}
			
			private function checkUpdateViewComplete():void {
				
				var appVersion:String = getCurrentVersion();
				trace(appVersion);				
				var url:String = data.siteURL + 'checkupdate';
				var vars:URLVariables = new URLVariables;
				vars.currentVersion = appVersion;
				var resultHandler:Function = function(event:Event):void {
					var resVars:URLVariables = URLLoader(event.target).data;
					trace(resVars.needUpdate);
					trace(resVars.updateURL);
					trace(resVars.updateRelNote);
					trace(resVars.latestVersion);
					if( resVars.needUpdate == 'true' ) {
						update(data.siteURL + resVars.updateURL, resVars.latestVersion);
					} else {
						lbUpdateStatus.text = 'no update available';
						selectedChild = loginView;
					}
				}
				send(url,resultHandler,URLRequestMethod.GET,vars,URLLoaderDataFormat.VARIABLES);				
			}			
			
			
			private function update(updateURL:String, latestVersion:String):void {
				var alertClickHandler:Function = function(event:CloseEvent):void{
					if(event.detail == Alert.YES) {
						lbUpdateStatus.text = 'downloading new version';
						var resultHandler:Function = function(event:Event):void {
							var bytes:ByteArray = URLLoader(event.target).data;
							trace(bytes.length);
							lbUpdateStatus.text = 'download complete';
							var fs:FileStream = new FileStream;
							var update_package:File = new File(File.applicationDirectory.resolvePath('update_package.air').nativePath);
							fs.open(update_package,FileMode.WRITE);
							fs.writeBytes(bytes);
							fs.close();
							var updater:Updater = new Updater;
							var version:String = latestVersion;
							updater.update(update_package, version);														
						}
						send(updateURL, resultHandler, URLRequestMethod.GET, null, URLLoaderDataFormat.BINARY);
						
					}
					else {
						selectedChild = loginView;
					}	
				}
				Alert.show('New version is available,\ninstall it?', 'Check Update', 3, this, alertClickHandler);
			}		
			
			
			private function loadConfig():void {
				if( configFile == null ) {
					configFile = new File(File.applicationDirectory.resolvePath(CONFIG_FILE_NAME).nativePath);
					trace(configFile.nativePath);								
					var fs:FileStream = new FileStream;				
					if(!configFile.exists) {
						_configDoc = <config></config>;
						fs.open(configFile, FileMode.WRITE);
						fs.writeUTFBytes(_configDoc.toXMLString());
					} else {
						fs.open(configFile, FileMode.READ);
						_configDoc = new XML(fs.readUTFBytes(fs.bytesAvailable));
					}
					fs.close();
				}
			}
			
			private function putConfig():void {
				var fs:FileStream = new FileStream;
				fs.open(configFile, FileMode.WRITE);
				fs.writeUTFBytes(_configDoc.toXMLString());
				fs.close();
			}
			
			private function onEmailChanged():void {
				if( rememberPasswd.selected ) {
					passwd.text = email.selectedItem.passwd;
				} else {
					passwd.text = '';
				}
			}
			
			private function doAutoSignIn():void {
				var t:Timer = new Timer(1000,1);
				t.addEventListener(TimerEvent.TIMER_COMPLETE, function(event:TimerEvent):void {
					SignIn();
				});
				t.start();
			}
			
			private function complete():void {
				loadConfig();				
				var dp:ArrayCollection = new ArrayCollection;
				var users:XMLList = _configDoc.user;
				var lastSignInUser:XML;
				var selectedItem:Object;
				for each(var user:XML in users) {
					var d:Object = {label:user.email, passwd:user.password};					
					dp.addItem(d);
					if( user.lastSignIn == 'true' ) {
						lastSignInUser = user;
						selectedItem = d;
					}
				}
				email.dataProvider = dp;				
				if( lastSignInUser ) {
					email.selectedItem = selectedItem;
					passwd.text = lastSignInUser.password;
					rememberPasswd.selected = lastSignInUser.rememberPasswd == 'true' ? true : false;
					autoSignIn.selected = lastSignInUser.autoSignIn == 'true' ? true : false;
					if( autoSignIn.selected) {
						passwd.enabled = false;
						btnSignIn.enabled = false;						
						doAutoSignIn();
					}
				}
			}
			
			private function storeCurrentUserInfo(currentUser:Account):void {
				var users:XMLList = _configDoc.user;
				var newUser:Boolean = true;
				for each( var user:XML in users) {
					if( user.email == currentUser.email ) {
						newUser = false;
						user.password = currentUser.passwd;
						user.lastSignIn = 'true';
						user.rememberPasswd= rememberPasswd.selected?'true':'false';
						user.autoSignIn = autoSignIn.selected ? 'true' : 'false';
						
					} else {
						user.lastSignIn = 'false';
					}
				}
				if( newUser ) {
					var userNode:XML = <user></user>;
					userNode.email = currentUser.email;
					userNode.password = currentUser.passwd;
					userNode.lastSignIn = 'true';
					userNode.rememberPasswd= rememberPasswd.selected?'true':'false';
					userNode.autoSignIn = autoSignIn.selected ? 'true' : 'false';
					_configDoc.appendChild(userNode);
				}
				putConfig(); 
			}
			
			private function SignIn():void {
				var url:String = 'https://www.google.com/accounts/ClientLogin';
				var vars:URLVariables = new URLVariables;
				vars.accountType = 'GOOGLE';
				vars.Email = email.text;
				vars.Passwd = passwd.text;
				vars.service = 'xapi';
				vars.source = 'Frank-xtasks-0.01';
				
				var resultHandler:Function = function(event:Event):void {
					var loader:URLLoader = event.target as URLLoader;
					trace(loader.data);
				}
				
				var httpResponseHandler:Function = function(event:HTTPStatusEvent):void {
					var statusCode:int = event.status;
					if( statusCode == 200 ) {
						trace('login sucessfully');
						var account:Account = new Account;
						account.email = vars.Email;
						if( rememberPasswd.selected ) {
							account.passwd = vars.Passwd;
						}
						storeCurrentUserInfo(account);
						data.onLogin(account);
					}
					else {
						trace('login failed, status code is', event.status);						
						Alert.show('Please try again!', 'Login error');						
					}					
				}
				send1(url, resultHandler, httpResponseHandler, URLRequestMethod.POST, vars);
			}
			
		]]>
	</mx:Script>
	
	

</mx:ViewStack>

