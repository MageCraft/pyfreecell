<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" dataChange="onDataChange()" 
	borderSides="bottom" borderColor="0xcccccc" borderStyle="solid"
	borderThickness="1" horizontalScrollPolicy="off">
	<mx:CheckBox id="cbDone" change="onCbDoneChange()"/>
	<mx:Label id="lbTaskContent" left="{cbDone.width}" styleName="MyFont" fontSize="12"
	    truncateToFit="true" width="{width-cbDone.width}" verticalCenter="2" paddingLeft="2"
	     mouseOut="onMouseOut()" mouseOver="onMouseOver()" click="onLbTaskContentClick()"/>
	<mx:Button styleName="btnDelete" id="btnDelete" right="5" alpha="0" click="onBtnDelete(event)"/>
	<mx:Fade id="fadeShow" alphaFrom="0" alphaTo="1" duration="300" target="{btnDelete}"/>
	<mx:Fade id="fadeHide" alphaFrom="1" alphaTo="0" duration="300" target="{btnDelete}"/>
	<mx:TextInput id="tiTaskContent" visible="false" left="{cbDone.width}" width="{lbTaskContent.width}"
	    styleName="MyFont" fontSize="12" borderColor="0x0000ff" borderStyle="solid" borderThickness="1"
	    cornerRadius="3" paddingLeft="2" verticalCenter="0" 
	    enter="onTiTaskContentEnter(event)" focusOut="onTiTaskContentFocusOut(event)"/>		
	<mx:Script>
		<![CDATA[
			include 'engine.as'
			import mx.controls.Button;
			import mx.controls.Label;
			import mx.controls.TextInput;
			import mx.controls.CheckBox;
			import mx.events.FlexEvent;			
			
			private var _checkBox:CheckBox;
			private var _input:TextInput;
			private var _addLabel:Label;
			private var _btnDelete:Button;
			private var _btnImportant:Button;	
			
			
			private function onMouseOut():void {
				if( data.task ) {
					trace('mouseOut', data.task.content);
					if( fadeShow.isPlaying) {
						fadeShow.stop();
					}
					fadeHide.play();
				}
			}
			
			private function onMouseOver():void {
				if( data.task ) {
					trace('mouseOver', data.task.content);
					if( fadeHide.isPlaying ) {
						fadeHide.stop();
					}
					fadeShow.play();
				}			
			} 	
						
			private function onCbDoneChange():void {
				var item:Object = data as Object;
				item.task.done = cbDone.selected;
				item.fnUpdateTask(item.task);
			}
			
			private function onAddLabelClick(event:MouseEvent):void {
				trace('click add new task');
				var item:Object = data as Object;
				item.fnAddTask();	
			}
			
			private function onDataChange():void {				
				var task:Task = data.task;
				if( task ) {
					lbTaskContent.text = task.content;
					cbDone.selected = task.done;
				} else {
					lbTaskContent.text = "Add new task...";
					cbDone.visible = false;
				}				
			}
			
			private function onBtnDelete(event:MouseEvent):void {
				trace('onBtnDelete');
				data.fnDeleteTask(data);			 	
			}
			
			private function onLbTaskContentClick():void {
				if( data.task ) {
					tiTaskContent.visible = true;
					tiTaskContent.text = lbTaskContent.text;
					tiTaskContent.setFocus();					
				} else {
					tiTaskContent.visible = true;
					tiTaskContent.setFocus();
				}
			}			
			
			private function onTiTaskContentEnter(event:Event):void {
				trace('enter',event.target.text);
				if( data.task ) {
					updateTaskContent();
				} else {
					var task:Task = new Task;
					task.content = tiTaskContent.text;					
					tiTaskContent.text = '';
					data.fnAddTask(task);				}
			}
			
			private function updateTaskContent():void {				
				data.task.content = tiTaskContent.text;
				lbTaskContent.text = tiTaskContent.text;
				tiTaskContent.visible = false;
				tiTaskContent.text = '';
				data.fnUpdateTask(data.task);			
			}
			
			private function onFocusIn(event:FocusEvent):void {
				trace('focusIn', event.target.text);
			}
			
			private function onTiTaskContentFocusOut(event:FocusEvent):void {
				trace('focusOut', event.target.text);
				if( data.task ) {
					updateTaskContent();
				} else {
					var task:Task = new Task;
					task.content = tiTaskContent.text;
					tiTaskContent.visible = false;
					tiTaskContent.text = '';
					data.fnAddTask(task);
				}
			}
			
		]]>
	</mx:Script>
</mx:Canvas>
