<?xml version="1.0" encoding="utf-8"?>
<mx:HBox xmlns:mx="http://www.adobe.com/2006/mxml" dataChange="onDataChange()" 
	borderSides="bottom" borderColor="0xcccccc" borderStyle="solid"
	borderThickness="1">		
	<mx:Script>
		<![CDATA[
			include 'engine.as'
			import mx.controls.Button;
			import mx.controls.Label;
			import mx.controls.TextInput;
			import mx.controls.CheckBox;
			import mx.events.FlexEvent;			
			
			private var _checkBox:CheckBox;
			private var _input:TextInput;
			private var _addLabel:Label;
			private var _btnDelete:Button;
			private var _btnImportant:Button;		
						
			private function onClick(event:MouseEvent):void {
				
			}
			private function onDataChange():void {
				if( data == null ) {
					if( _addLabel == null ) {
						_addLabel = new Label;
						_addLabel.percentWidth=100;
						_addLabel.text = 'Add new task...';
						addChild(_addLabel);
					}
				}
				else {
					if( _checkBox == null ) {
						_checkBox = new CheckBox;
						_checkBox.label = '';
						_checkBox.addEventListener(MouseEvent.CLICK, onClick);
						addChild(_checkBox);
					}
					if( _input == null ) {
						_input = new TextInput;
						_input.text = data.task.content;
						_input.percentWidth = 100;
						_input.editable = false;
						_input.setStyle('borderStyle', 'none');
						_input.setStyle('fontFamily', 'Consolas');
						_input.setStyle('fontSize', 12);						
						_input.addEventListener(MouseEvent.CLICK, onClick1);
						_input.addEventListener(FlexEvent.ENTER, onEnter);
						_input.addEventListener(FocusEvent.FOCUS_IN, onFocusIn);
						_input.addEventListener(FocusEvent.FOCUS_OUT, onFocusOut);
						addChild(_input);
					}
					/*
					if( _btnImportant == null ) {
						_btnImportant = new Button;
						_btnImportant.label = '!';
						addChild(_btnImportant);
					}
					if( _btnDelete == null ) {
						_btnDelete = new Button;
						_btnDelete.label = 'X';
						addChild(_btnDelete);
						_btnDelete.addEventListener(MouseEvent.CLICK, onBtnDelete);						
					}
					*/
					
				}			 
				
			}
			
			private function onBtnDelete(event:MouseEvent):void {
				trace('onBtnDelete');
				data.fnDeleteTask(data);			 	
			}
			
			private function onClick1(event:MouseEvent):void {
				trace('click1');
				_input.editable = true;
				_input.setStyle('borderStyle', "solid");
				_input.setStyle('borderColor', 0x0000ff);
				_input.setStyle('borderThickness', 2);
			}
			
			private function onEnter(event:Event):void {
				trace('enter',event.target.text);
				_input.editable = false;
				_input.setStyle('borderStyle', 'none');
				data.task.content = _input.text;
				data.fnUpdateTask(data.task);
			}
			
			private function onFocusIn(event:FocusEvent):void {
				trace('focusIn', event.target.text);
			}
			
			private function onFocusOut(event:FocusEvent):void {
				trace('focusOut', event.target.text);
				_input.editable = false;
				_input.setStyle('borderStyle', 'none');
			}
			
		]]>
	</mx:Script>
</mx:HBox>
