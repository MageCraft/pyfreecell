<?xml version="1.0" encoding="utf-8"?>
<mx:Canvas xmlns:mx="http://www.adobe.com/2006/mxml" dataChange="onDataChange()" 
	borderSides="bottom" borderColor="0xcccccc" borderStyle="solid"
	borderThickness="1" horizontalScrollPolicy="off" creationComplete="complete()"
	rollOver="onRollOver(event)" rollOut="onRollOut(event)">
	<mx:CheckBox id="cbDone" change="onCbDoneChange()"/>
	<mx:Label id="lbTaskContent" left="{cbDone.width}" styleName="MyFont" fontSize="12"
	    truncateToFit="true" width="{width-cbDone.width}" verticalCenter="2" paddingLeft="2"	     
	    click="onLbTaskContentClick()"/>
	<mx:Button styleName="btnDelete" id="btnDelete" right="5" alpha="0" click="onBtnDelete(event)"
		verticalCenter="0"/>
	<mx:TextInput id="tiTaskContent" visible="false" left="{cbDone.width}" width="{lbTaskContent.width}"
	    styleName="MyFont" fontSize="12" borderColor="0x0000ff" borderStyle="solid" borderThickness="1"
	    cornerRadius="3" paddingLeft="2" verticalCenter="0" 
	    enter="onTiTaskContentEnter(event)" focusOut="onTiTaskContentFocusOut(event)"/>
	    
	<mx:Fade id="fadeShow"/>
	<mx:Fade id="fadeHide"/>
			
	<mx:Script>
		<![CDATA[
			include 'engine.as'
			import mx.controls.Button;
			import mx.controls.Label;
			import mx.controls.TextInput;
			import mx.controls.CheckBox;
			import mx.events.FlexEvent;	
			
			private var inEditing:Boolean = false;			
			
			private var _showBtnDeleteTimer:Timer = new Timer(200,1);	
			
			private function complete():void {
				_showBtnDeleteTimer.addEventListener(TimerEvent.TIMER_COMPLETE, function(event:TimerEvent):void {
					fadeShow.alphaFrom = btnDelete.alpha;
					fadeShow.alphaTo = 1;
					fadeShow.target = btnDelete;
					fadeShow.duration = 300;
					fadeShow.play();
				});
			}
			
			private function onRollOver(event:MouseEvent):void {					
				if( data.task ) {
					//trace('onRollOver', data.task.content);					
					_showBtnDeleteTimer.start();
				}	
			}
			
			private function onRollOut(event:MouseEvent):void {				
				if( data.task ) {
					//trace('onRollOut', data.task.content);					
					if( _showBtnDeleteTimer.running ) {
						_showBtnDeleteTimer.stop();
					}
					if( fadeShow.isPlaying ) {
						fadeShow.stop();
					}
					fadeHide.alphaFrom = btnDelete.alpha;
					fadeHide.alphaTo = 0;
					fadeHide.target = btnDelete;
					fadeHide.duration = 300;
					fadeHide.play();										
				}	
			}		 	
						
			private function onCbDoneChange():void {
				var item:Object = data as Object;
				item.task.done = cbDone.selected;
				item.fnUpdateTask(item.task);
			}			
			
			
			private function onDataChange():void {
				trace('onDataChange');				
				var task:Task = data.task;
				if( task ) {
					trace(task.content);
					lbTaskContent.text = task.content;
					cbDone.selected = task.done;					
					cbDone.visible = true;					
					btnDelete.alpha = 0;
				} else {
					trace('task is null');
					lbTaskContent.text = "Add new task...";
					cbDone.visible = false;
					btnDelete.alpha = 0;
				}
				
				if( data.editableAtFirst ) {					
					onLbTaskContentClick();
					//data.editableAtFirst = false;
				} else {
					tiTaskContent.visible = false;
				}
								
			}
			
			private function onBtnDelete(event:MouseEvent):void {
				trace('onBtnDelete');
				data.fnDeleteTask(data);			 	
			}
			
			private function onLbTaskContentClick():void {
				if( data.task ) {
					tiTaskContent.visible = true;
					tiTaskContent.text = lbTaskContent.text;
					tiTaskContent.setFocus();										
				} else {
					tiTaskContent.visible = true;
					tiTaskContent.setFocus();
				}
				inEditing = true;
			}			
			
			private function onTiTaskContentEnter(event:Event):void {
				trace('enter', event.target.text);				
				updateTaskContent(true);
								
			}
			
			private function updateTaskContent(onEnter:Boolean=false):void {
				if( data.task ) {
					if( tiTaskContent.text != data.task.content ) {
						data.task.content = tiTaskContent.text;
						lbTaskContent.text = tiTaskContent.text;
						data.fnUpdateTask(data.task);
					}
				}
				else {
					if( tiTaskContent.text != '' ) {
						var task:Task = new Task;
						task.content = tiTaskContent.text;
						data.task = task;
						data.fnAddTask(task, onEnter);					
						onDataChange();	
					}			
				}			
				tiTaskContent.visible = false;
				tiTaskContent.text = '';
				inEditing = false;							
			}
			
			private function onFocusIn(event:FocusEvent):void {
				trace('focusIn', event.target.text);
			}
			
			private function onTiTaskContentFocusOut(event:FocusEvent):void {
				trace('focusOut', event.target.text);
				if( inEditing ) {				
					updateTaskContent();
					if( data.editableAtFirst ) {
						data.ediableAtFirst = false;
					}					
				}
			}
			
		]]>
	</mx:Script>
</mx:Canvas>
