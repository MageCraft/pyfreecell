<?xml version="1.0" encoding="utf-8"?>
<mx:ViewStack xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:local="*">	
		
	<local:Login id="loginView" width="100%" height="100%" initialize="loginViewComplete()"/>
	
	<mx:VBox id="taskView" creationComplete="taskViewComplete()" verticalGap="0">	
		<mx:VBox width="100%" backgroundColor="0xFFFFFF">
			<mx:Label styleName="MyFont" fontSize="16" text="My Tasks List"/>	
		</mx:VBox>			
		<mx:HRule width="100%" strokeColor="0xcccccc"/>
		<mx:Canvas width="100%" height="100%">
			<local:MyList id="listTasks" itemRenderer="ItemTask" width="100%" height="100%" change="onChanged()"
				 verticalAlign="middle" paddingTop="0" paddingBottom="0" borderStyle="none" horizontalScrollPolicy="off"				  
				 updateComplete="onListUpdateComplete(event)" 
				 />	
		</mx:Canvas>
	</mx:VBox>	
		
	<mx:Script>
		<![CDATA[
			import mx.events.FlexEvent;
			import mx.events.ListEvent;
			import mx.collections.ArrayCollection;
			
			private var isTaskViewComplete:Boolean = false;
			
			private var _addingNewTask:Boolean = false;
			
			include 'engine.as'
			
			private var currentUser:Account;
			
			private var siteURL:String = 'http://xatasks.appspot.com/';
			//private var siteURL:String = 'http://localhost:8080/';
			
					
			
			private function onListUpdateComplete(event:FlexEvent):void {
				trace(listTasks.verticalScrollPosition, listTasks.maxVerticalScrollPosition);
				if( _addingNewTask ) {
					_addingNewTask = false;
					if( listTasks.verticalScrollPosition != listTasks.maxVerticalScrollPosition ) {
						listTasks.verticalScrollPosition = listTasks.maxVerticalScrollPosition;
					}
				}
			}		
			private function loginViewComplete():void {
				
				loginView.data = new Object;
				loginView.data.onLogin = onLogin;
				loginView.data.siteURL = siteURL;
			}
			
			private function onLogin(account:Account):void {
				currentUser = account;
				selectedChild = taskView;
				if( isTaskViewComplete ) {
					taskViewComplete();
				}
			}
			
			private function list():void {
				var url:String = siteURL + 'list';
				var vars:URLVariables = new URLVariables;
				vars.email = currentUser.email;
				var resultHandler:Function = function(event:Event):void {
					var xml:String = URLLoader(event.target).data;
					trace(xml);
					var xmlDoc:XML = new XML(xml);
					var tasks:XMLList = xmlDoc.task;
					var dp:ArrayCollection = new ArrayCollection;					
					for each(var task:XML in tasks) {
						var t:Task = new Task;
						t.key = task.@key;
						t.content = task.@content;
						t.done = task.@done == 'false' ? false:true;
						addItem(t,dp);
					}
					addItem(null,dp);									
					listTasks.dataProvider = dp;
				}
				send(url, resultHandler, URLRequestMethod.GET, vars);
			}
			
			private function taskViewComplete():void {
				trace('task view complete');				
				if( currentUser == null ) {
					isTaskViewComplete = true;
					trace('not login yet');
					return;
				}
				
				var t:Timer = new Timer(1000,1);
				t.addEventListener(TimerEvent.TIMER_COMPLETE, function(event:TimerEvent):void {
					list();					
				});
				t.start();
			}
			
			private function onChanged():void {
				trace('onChanged');				
			}
			
			private function addItem(task:Task, dp:ArrayCollection, newTask:Boolean=false, continueAdd:Boolean=false):void {				
				var item:Object = new Object;
				item.task = task;
				item.fnDeleteTask = deleteTask;
				item.fnUpdateTask = updateTask;
				item.fnAddTask = addTask;
				item.editableAtFirst = continueAdd;				
				
				dp.addItem(item);
				
				if( newTask ) {
					_addingNewTask = true;
				}				
				
			}
			
			private function addTask(task:Task, continueAdd:Boolean=false):void {				
				trace('addTask');							
				var url:String = siteURL + 'add';
				var vars:URLVariables = new URLVariables;
				vars.content = task ? task.content : '';
				vars.email = currentUser.email;
				var resultHandler:Function = function(event:Event):void {
					var key:String = URLLoader(event.target).data.key;					
					task.key = key;
					var dp:ArrayCollection = listTasks.dataProvider as ArrayCollection;	
					addItem(null,dp,true, continueAdd);					
				}
				send(url,resultHandler, URLRequestMethod.POST, vars, URLLoaderDataFormat.VARIABLES);
			}						
			
			
			private function deleteTask(item:Object):void {
				var task:Task = item.task;				
				var url:String = siteURL + 'delete';
				var vars:URLVariables = new URLVariables;
				vars.key = task.key;
				var resultHandler:Function = function(event:Event):void {
					trace(URLLoader(event.target).data);
					var dp:ArrayCollection = listTasks.dataProvider as ArrayCollection;
					var index:int = dp.getItemIndex(item);
					dp.removeItemAt(index);
				}
				send(url, resultHandler, URLRequestMethod.POST, vars);
			}
			
			private function updateTask(task:Task):void {
				var url:String = siteURL + 'update'
				var vars:URLVariables = new URLVariables;
				vars.key = task.key;
				vars.content = task.content;
				vars.done = task.done;
				vars.email = currentUser.email;
				trace(vars.toString());
				var resultHandler:Function = function(event:Event):void {
					trace(URLLoader(event.target).data);
				}
				send(url, resultHandler, URLRequestMethod.POST, vars);
			}
			
			
		]]>
	</mx:Script>	
</mx:ViewStack>
